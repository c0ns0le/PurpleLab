---

- name: Hostname -> DC
  win_hostname:
    name: dc
  register: res

- name: Reboot
  win_reboot:
  when: res.reboot_required

- name: Set HostOnly IP Address
  win_shell: "New-NetIPAddress –InterfaceAlias Ethernet1 –AddressFamily IPv4 -IPAddress 10.1.1.1 –PrefixLength 24 -DefaultGateway 10.1.1.254"

- name: Set DNS Address
  win_shell: "Set-DnsClientServerAddress -InterfaceAlias Ethernet1 -ServerAddresses 127.0.0.1,1.1.1.1"

- name: Install git
  win_chocolatey:
    name: git
    state: present

- name: Check if existing PurpleLab directory
  win_stat:
    path: 'c:\PurpleLab'
  register: dir

- name: Git clone PurpleLab
  win_shell: git clone https://github.com/neokjames/PurpleLab.git
  args:
    chdir: 'c:\'
  when: not dir.stat.exists

- name: Copy scripts to c:\vagrant
  win_shell: Copy-Item -Recurse c:\PurpleLab\Vagrant c:\vagrant

- name: Create the Domain
  win_shell: .\\provision.ps1
  args:
    chdir: 'c:\vagrant\scripts'
  register: domain_creation
  changed_when: "'Status         : Success' in domain_creation.stdout"
  failed_when: "'Exception' in domain_creation.stderr"

- name: Reboot Afer Domain Creation
  win_reboot:
    msg: "Installing AD. Rebooting..."
    pre_reboot_delay: 15
    reboot_timeout: 600
    post_reboot_delay: 60

- name: Configure OU
  win_shell: .\\configure-ou.ps1
  args:
    chdir: 'c:\vagrant\scripts'
  register: ou_creation
  vars:
    ansible_become: yes
    ansible_become_method: runas
    ansible_become_user: purple.lab\vagrant
    ansible_become_password: vagrant
    ansible_become_flags: logon_type=new_credentials logon_flags=netcredentials_only
  failed_when: "'Exception' in ou_creation.stderr"

- debug: msg="{{ ou_creation.stdout_lines }}"

- name: Configure Powershell Logging GPO
  win_shell: .\\configure-powershelllogging.ps1
  args:
    chdir: 'c:\vagrant\scripts'
  register: powershell_gpo
  vars:
    ansible_become: yes
    ansible_become_method: runas
    ansible_become_user: purple.lab\vagrant
    ansible_become_password: vagrant
    ansible_become_flags: logon_type=new_credentials logon_flags=netcredentials_only
  failed_when: "'Exception' in powershell_gpo.stderr"

- debug: msg="{{ powershell_gpo.stdout_lines }}"

- name: Disable Windows Defender GPO
  win_shell: .\\configure-disable-windows-defender-gpo.ps1
  args:
    chdir: 'c:\vagrant\scripts'
  register: disable_win_def
  vars:
    ansible_become: yes
    ansible_become_method: runas
    ansible_become_user: purple.lab\vagrant
    ansible_become_password: vagrant
    ansible_become_flags: logon_type=new_credentials logon_flags=netcredentials_only
  failed_when: "'Exception' in disable_win_def.stderr"

- debug: msg="{{ disable_win_def.stdout_lines }}"

- name: Configure RDP Permissions GPO
  win_shell: .\\configure-rdp-user-gpo.ps1
  args:
    chdir: 'c:\vagrant\scripts'
  register: rdp_gpo
  vars:
    ansible_become: yes
    ansible_become_method: runas
    ansible_become_user: purple.lab\vagrant
    ansible_become_password: vagrant
    ansible_become_flags: logon_type=new_credentials logon_flags=netcredentials_only
  failed_when: "'Exception' in rdp_gpo.stderr"

- debug: msg="{{ rdp_gpo.stdout_lines }}"

- name: Configure DC with raw Commands
  win_shell: "{{ item }}"
  with_items:
    - "wevtutil el | Select-String -notmatch \"Microsoft-Windows-LiveId\" | Foreach-Object {wevtutil cl \"$_\"}"
    - "Set-SmbServerConfiguration -AuditSmb1Access $true -Force"
